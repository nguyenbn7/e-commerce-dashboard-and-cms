// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  userId     String      @map("user_id") @db.VarChar(255)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  billboards Billboard[] @relation("store_billboard")
  Category   Category[]  @relation("store_category")
  Size       Size[]      @relation("store_size")
  Color      Color[]     @relation("store_color")
  Product    Product[]   @relation("store_product")
  Order      Order[]     @relation("store_order")

  @@index([userId])
  @@map("store")
}

model Billboard {
  id        Int        @id @default(autoincrement())
  label     String     @db.VarChar(255)
  imageUrl  String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  storeId   Int        @map("store_id")
  store     Store      @relation("store_billboard", fields: [storeId], references: [id])
  Category  Category[] @relation("category_billboard")

  @@index([storeId])
  @@map("billboard")
}

model Category {
  id          Int       @id @default(autoincrement())
  storeId     Int       @map("store_id")
  store       Store     @relation("store_category", fields: [storeId], references: [id])
  billboardId Int       @map("billboard_id")
  billboard   Billboard @relation("category_billboard", fields: [billboardId], references: [id])
  name        String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Product     Product[] @relation("category_product")

  @@index([storeId])
  @@index([billboardId])
  @@map("category")
}

model Size {
  id        Int       @id @default(autoincrement())
  storeId   Int       @map("store_id")
  store     Store     @relation("store_size", fields: [storeId], references: [id])
  name      String    @db.VarChar(255)
  value     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Product   Product[] @relation("size_product")

  @@index([storeId])
  @@map("size")
}

model Color {
  id        Int       @id @default(autoincrement())
  storeId   Int       @map("store_id")
  store     Store     @relation("store_color", fields: [storeId], references: [id])
  name      String    @db.VarChar(255)
  value     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Product   Product[] @relation("color_product")

  @@index([storeId])
  @@map("color")
}

model Product {
  id         Int         @id @default(autoincrement())
  storeId    Int         @map("store_id")
  store      Store       @relation("store_product", fields: [storeId], references: [id])
  categoryId Int         @map("category_id")
  category   Category    @relation("category_product", fields: [categoryId], references: [id])
  name       String      @db.VarChar(255)
  price      Int
  isFeatured Boolean     @default(false) @map("is_featured")
  isArchived Boolean     @default(false) @map("is_archived")
  sizeId     Int         @map("size_id")
  size       Size        @relation("size_product", fields: [sizeId], references: [id])
  colorId    Int         @map("color_id")
  color      Color       @relation("color_product", fields: [colorId], references: [id])
  images     Image[]
  OrderItem  OrderItem[] @relation("order_item_product")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@map("product")
}

model Image {
  id        String   @id @default(uuid())
  url       String   @db.VarChar(255)
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@map("image")
}

model Order {
  id         String      @id @default(uuid())
  storeId    Int         @map("store_id")
  store      Store       @relation("store_order", fields: [storeId], references: [id])
  isPaid     Boolean     @default(false) @map("is_paid")
  phone      String      @default("") @db.VarChar(16)
  address    String      @default("") @db.VarChar(511)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  orderItems OrderItem[]

  @@index([storeId])
  @@map("order")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  Order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation("order_item_product", fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_item")
}
